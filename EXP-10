import heapq

class Node:
    def __init__(self, x, y, parent=None):
        self.x = x
        self.y = y
        self.parent = parent
        self.g = 0
        self.h = 0
        
    def __lt__(self, other):
        return self.g + self.h < other.g + other.h

def heuristic(node, goal):
    return abs(node.x - goal.x) + abs(node.y - goal.y)

def astar(grid, start, goal):
    open_set = []
    heapq.heappush(open_set, start)
    closed_set = set()
    
    while open_set:
        current = heapq.heappop(open_set)
        
        if current.x == goal.x and current.y == goal.y:
            path = []
            while current:
                path.append((current.x, current.y))
                current = current.parent
            return path[::-1]
        
        closed_set.add((current.x, current.y))
        
        for i, j in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            x, y = current.x + i, current.y + j
            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] != 1 and (x, y) not in closed_set:
                neighbor = Node(x, y, current)
                neighbor.g = current.g + 1
                neighbor.h = heuristic(neighbor, goal)
                
                if neighbor not in open_set:
                    heapq.heappush(open_set, neighbor)
    
    return None

# Example usage
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 0, 1],
    [1, 0, 1, 0, 0],
    [0, 0, 0, 0, 0]
]

start = Node(0, 0)
goal = Node(4, 4)
path = astar(grid, start, goal)

print(path)
