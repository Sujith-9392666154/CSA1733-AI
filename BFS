from collections import deque

def bfs(graph, start, goal):
    # Create a queue for BFS and enqueue the starting node
    queue = deque([(start, [start])])
    visited = set()

    while queue:
        # Dequeue a vertex from the queue
        (current_node, path) = queue.popleft()
        
        if current_node not in visited:
            # Mark the node as visited
            visited.add(current_node)

            # If the goal is reached, return the path
            if current_node == goal:
                return path

            # Get all adjacent vertices of the dequeued vertex current_node
            for neighbor in graph[current_node]:
                if neighbor not in visited:
                    # Enqueue the adjacent nodes with the updated path
                    queue.append((neighbor, path + [neighbor]))

    # If the goal is not reachable, return None
    return None

# Example graph represented as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

start_node = 'A'
goal_node = 'F'

# Perform BFS to find the path from start_node to goal_node
path = bfs(graph, start_node, goal_node)

if path:
    print(f"Path from {start_node} to {goal_node}: {' -> '.join(path)}")
else:
    print(f"No path found from {start_node} to {goal_node}")
